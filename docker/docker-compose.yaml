version: '3.8'
networks:
  Tg_network:
    driver: bridge
    ipam:
      config:
        - subnet: 9.0.0.0/24
volumes:
  pgdata:
  pglog:
services:

  db_image:
    networks:
      Tg_network:
        ipv4_address: ${DB_HOST}
    env_file:
      - .env
    restart: unless-stopped
    build:
      context: ./db
      dockerfile: Dockerfile 
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_REPLICATION_USER: ${DB_REPL_USER}
      POSTGRES_REPLICATION_PASSWORD: ${DB_REPL_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sh:/docker-entrypoint-initdb.d/init.sh
      - pglog:/var/log/postgresql
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c listen_addresses='*'
      -c logging_collector=on
      -c log_directory='/var/log/postgresql'
      -c log_filename='postgresql.log'
      -c log_truncate_on_rotation=off
      -c log_rotation_age=0
      -c log_rotation_size=0
      -c log_statement=all
      -c log_replication_commands=on
      -c log_min_messages=debug1
      -c log_min_error_statement=debug1 
      -c 'config_file=/var/lib/postgresql/data/postgresql.conf'

  db_repl_image:
    env_file:
      - .env
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    ports:
      - "${DB_REPL_PORT}:5432"
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    user: postgres
    networks:
      Tg_network:
        ipv4_address: ${DB_REPL_HOST}
    command: |
      bash -c "
      while ! pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER}; do
          echo 'Waiting for main database to be ready...'
          sleep 1
      done
      echo 'Main database is ready.'
      export PGPASSWORD=$DB_REPL_PASSWORD
      pg_ctl stop -D /var/lib/postgresql/data -m fast
      until pg_basebackup -h ${DB_HOST} -U $DB_REPL_USER -D /var/lib/postgresql/data --wal-method=stream -v -P --write-recovery-conf; do
        echo 'Waiting for the main server to connect...'
        sleep 1s
      done
      echo 'Backup completed, starting replication...'
      chmod 0700 /var/lib/postgresql/data
      pg_ctl start -D /var/lib/postgresql/data
      "

  bot_image:
    build:
      context: ./bot
      dockerfile: Dockerfile
    networks:
      Tg_network:
    environment:
      TOKEN: $TOKEN
      RM_HOST: $RM_HOST
      RM_PORT: $RM_PORT
      RM_USER: $RM_USER
      RM_PASSWORD: $RM_PASSWORD
    env_file:
      - .env
    volumes:
      - pglog:/app/logs
    depends_on:
      - db_image
      - db_repl_image